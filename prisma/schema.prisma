generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RouteType {
  ONEWAY
  ROUNDTRIP
  MULTIWAY
}

enum FlightType {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST
}

model Flight {
  id            String     @id @default(uuid()) @map("_id")
  type          RouteType
  from          String
  to            String
  airline       String
  departureDate DateTime
  flightClass   FlightType
  passengers    Json[]
}

model CoTraveler {
  id          String @id @default(uuid()) @map("_id")
  name        String
  dob         String
  email       String
  passportNo  String
  phoneNumber String
}

//user model
// api /auth/sign-up /auth/login
// /user-profile update api 
model User {
  id            String  @id @default(uuid()) @map("_id")
  firstname     String
  lastname      String
  mobileNumber  String?
  email         String  @unique
  address       String?
  dob           String?
  passportNo    String?
  lastBooking   String?
  country       String?
  gender        String?
  pincode       String?
  avatarSrc     String?
  passportImage String?
  password      String?
  cotraveler    Json[]
}

enum AirlineFeeType {
  PERCENT
  FIXED
}

model AirlineCommision {
  id             String         @id @default(uuid()) @map("_id")
  type           String
  commisionTitle String
  supplier       String
  commissionFees String
  feeType        AirlineFeeType
}

enum TicketStatus {
  OPEN
  PENDING
  RESOLVE
}

model TicketManagement {
  id            String       @id @default(uuid()) @map("_id")
  subject       String
  requesterName String
  requestedOn   DateTime     @default(now())
  status        TicketStatus
  images        String[]
}

model Booking {
  id             String @id @default(uuid()) @map("_id")
  contactDetail  Json // email and phone number
  flightDetails  Json[]
  payment        String // Payment id
  passenger      Json[] // passenger[] id reference
  address        Json
  baseFare       Json[]
  tax_fee_surges Json[]
  otherCharges   Json[]
  discount       Json
  totalAmount    String
  currency       String
}

model Payment {
  id          String   @id @default(uuid()) @map("_id")
  amount      Float
  currency    String
  paymentType String
  status      String
  paymentDate DateTime
}

model passenger {
  id          String @id @default(uuid()) @map("_id")
  name        String
  dob         String
  email       String
  passportNo  String
  phoneNumber String
}

enum FlightSupplier {
  AMADEUS
  KIUSYS
  DUFFEL
  ALL
  NONE
}

model firewall {
  id           String         @id @default(uuid()) @map("_id")
  title        String
  supplier     FlightSupplier
  code         String
  flightNumber String
  from         String
  to           String
  updateTime   DateTime       @default(now())
}

enum CommissionType {
  AIRLINE
  HOTEL
  CAR_RENTAL
}

model commissionManagement {
  id              String         @id @default(uuid()) @map("_id")
  type            CommissionType
  commissionTitle String
  supplier        FlightSupplier
  commissionFees  String
  feeType         AirlineFeeType
  updateTime      DateTime       @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum Status {
  ACTIVE
  INACTIVE
}

model userManagement {
  id       String @id @default(uuid()) @map("_id")
  uniqueId String
  name     String
  address  String
  email    String
  password String
  contact  String
  roleId   String
  roleName String
  status   Status
  role     Role   @relation(fields: [roleId], references: [id])
}

model Role {
  id               String           @id @default(uuid()) @map("_id")
  name             String
  description      String
  permissionGroups Json[]
  userManagement   userManagement[]
}

model Cookie {
  id                        String  @id @default(uuid()) @map("_id")
  cookieToggle              Boolean
  enableLogging             Boolean
  strictlyNecessaryCookies  Boolean
  cookieDescription         String
  cookieTitle               String
  strictlyCookieTitle       String
  strictlyCookieDescription String
  contactUsDescription      String
  contactUsURL              String
}

model EmailSMTP {
  id              String @id @default(uuid()) @map("_id")
  mailDriver      String
  mailDriverHost  String
  mailPort        String
  mailUsername    String
  mailPassword    String
  mailEncryption  String
  mailFromAddress String
  mailFromName    String
}

model SocialSettings {
  id              String  @id @default(uuid()) @map("_id")
  socialsEnable   Boolean
  socialPlatforms Json[]
}

model UserSupport {
  id          String @id @default(uuid()) @map("_id")
  type        String
  title       String
  name        String
  email       String
  description String
  imgUrl      String
}

model privacyPolicy {
  id        String  @id @default(uuid()) @map("_id")
  isEnabled Boolean
  content   Json[]
}
